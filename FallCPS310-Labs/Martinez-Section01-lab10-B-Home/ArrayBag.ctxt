#BlueJ class context
comment0.target=ArrayBag
comment0.text=\nA\ class\ of\ bags\ whose\ entries\ are\ stored\ in\ a\ fixed-size\ array.\n@author\ Frank\ M.\ Carrano\n\ This\ code\ is\ from\ Chapter\ 2\ of\n\ Data\ Structures\ and\ Abstractions\ with\ Java\ 4/e\n\ \ \ \ \ \ by\ Carrano\ \n
comment1.params=
comment1.target=ArrayBag()
comment1.text=Creates\ an\ empty\ bag\ whose\ initial\ capacity\ is\ 25.
comment10.params=anEntry
comment10.target=boolean\ contains(java.lang.Object)
comment10.text=\ Tests\ whether\ this\ bag\ contains\ a\ given\ entry.\n\ \ \ \ @param\ anEntry\ The\ entry\ to\ locate.\n@return\ True\ if\ the\ bag\ contains\ anEntry,\ or\ false\ if\ not.
comment11.params=
comment11.target=void\ clear()
comment11.text=Removes\ all\ entries\ from\ this\ bag.
comment12.params=
comment12.target=java.lang.Object\ remove()
comment12.text=\ Removes\ one\ unspecified\ entry\ from\ this\ bag,\ if\ possible.\n\ \ \ \ @return\ Either\ the\ removed\ entry,\ if\ the\ removal\ was\ successful,\nor\ null\ if\ otherwise.
comment13.params=anEntry
comment13.target=boolean\ remove(java.lang.Object)
comment13.text=\ Removes\ one\ occurrence\ of\ a\ given\ entry\ from\ this\ bag.\n\ \ \ \ @param\ anEntry\ The\ entry\ to\ be\ removed.\n@return\ True\ if\ the\ removal\ was\ successful,\ or\ false\ if\ not.
comment14.params=givenIndex
comment14.target=java.lang.Object\ removeEntry(int)
comment15.params=anEntry
comment15.target=int\ getIndexOf(java.lang.Object)
comment16.params=
comment16.target=java.lang.String\ toString()
comment16.text=\ Override\ the\ toString()\ method\ so\ that\ we\ get\ a\ more\ useful\ display\ of\n\ the\ contents\ in\ the\ bag.\n@return\ a\ string\ representation\ of\ the\ contents\ of\ the\ bag
comment2.params=desiredCapacity
comment2.target=ArrayBag(int)
comment2.text=\n\ Creates\ an\ empty\ bag\ having\ a\ given\ initial\ capacity.\n\n\ @param\ desiredCapacity\ The\ integer\ capacity\ desired.\n
comment3.params=newEntry
comment3.target=boolean\ add(java.lang.Object)
comment3.text=\ Adds\ a\ new\ entry\ to\ this\ bag.\n\ \ \ \ @param\ newEntry\ The\ object\ to\ be\ added\ as\ a\ new\ entry.\n@return\ True\ if\ the\ addition\ is\ successful,\ or\ false\ if\ not.
comment4.params=
comment4.target=void\ checkInitialization()
comment4.text=\ Throws\ an\ exception\ if\ this\ object\ is\ not\ initialized.\n\ \n
comment5.params=
comment5.target=java.lang.Object[]\ toArray()
comment5.text=\ Retrieves\ all\ entries\ that\ are\ in\ this\ bag.\n@return\ A\ newly\ allocated\ array\ of\ all\ the\ entries\ in\ the\ bag.
comment6.params=
comment6.target=boolean\ isArrayFull()
comment6.text=\ Sees\ whether\ this\ bag\ is\ full.\n@return\ True\ if\ the\ bag\ is\ full,\ or\ false\ if\ not.
comment7.params=
comment7.target=boolean\ isEmpty()
comment7.text=\ Sees\ whether\ this\ bag\ is\ empty.\n@return\ True\ if\ the\ bag\ is\ empty,\ or\ false\ if\ not.
comment8.params=
comment8.target=int\ getCurrentSize()
comment8.text=\ Gets\ the\ current\ number\ of\ entries\ in\ this\ bag.\n@return\ The\ integer\ number\ of\ entries\ currently\ in\ the\ bag.
comment9.params=anEntry
comment9.target=int\ getFrequencyOf(java.lang.Object)
comment9.text=\ Counts\ the\ number\ of\ times\ a\ given\ entry\ appears\ in\ this\ bag.\n\ \ \ \ @param\ anEntry\ The\ entry\ to\ be\ counted.\n@return\ The\ number\ of\ times\ anEntry\ appears\ in\ the\ bag.
numComments=17
